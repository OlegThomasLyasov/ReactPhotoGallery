{"ast":null,"code":"import { makeAutoObservable } from 'mobx'; //изменения \n\nimport { fetchPhotos } from \"../http/photoAPI\";\nimport { useContext, useEffect } from \"react\";\nimport { Context } from \"../index\";\nexport default class PhotoStore {\n  constructor() {\n    this._types = [];\n    this._photo = [];\n    this._selectedType = {};\n    this._page = 1;\n    this._totalCount = 0;\n    this._limit = 8;\n    this._count = 0;\n    this._last = {};\n    makeAutoObservable(this); //слежка за изменениями\n  } //при изменении перерендеринг\n\n\n  setTypes(types) {\n    this._types = types;\n  }\n\n  setPhotos(photo) {\n    this._photo = photo;\n  }\n\n  setSelectedType(type) {\n    this.setPage(1);\n    this._selectedType = type; //console.log(this._count)\n\n    if (this._selectedType != this._last) {\n      this._last = this._selectedType;\n      fetchPhotos(this._selectedType.id, this._page, 8).then(data => {\n        //console.log(data.count)\n        this.setPhotos(data.rows);\n        this.setTotalCount(data.count);\n      }); //console.log('Ок')\n    } else if (this._count % 2 == 0 && this._selectedType == this._last) {\n      //console.log('Брух')\n      this._selectedType = 0;\n    }\n\n    this._count = this._count + 1;\n  }\n\n  setPage(page) {\n    this._page = page;\n  }\n\n  setTotalCount(count) {\n    this._totalCount = count;\n  } //компьютед функции, вызываются только при изменении\n\n\n  get types() {\n    return this._types;\n  }\n\n  get photos() {\n    return this._photo;\n  }\n\n  get selectedType() {\n    return this._selectedType;\n  }\n\n  get totalCount() {\n    return this._totalCount;\n  }\n\n  get page() {\n    return this._page;\n  }\n\n  get limit() {\n    return this._limit;\n  }\n\n}","map":{"version":3,"sources":["C:/OpenServer/domains/gallery/client/src/photo/photoStore.js"],"names":["makeAutoObservable","fetchPhotos","useContext","useEffect","Context","PhotoStore","constructor","_types","_photo","_selectedType","_page","_totalCount","_limit","_count","_last","setTypes","types","setPhotos","photo","setSelectedType","type","setPage","id","then","data","rows","setTotalCount","count","page","photos","selectedType","totalCount","limit"],"mappings":"AAAA,SAAQA,kBAAR,QAAiC,MAAjC,C,CAAwC;;AACxC,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,SAASC,OAAT,QAAwB,UAAxB;AAIA,eAAe,MAAMC,UAAN,CAAiB;AAE5BC,EAAAA,WAAW,GAAE;AAET,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,MAAL,GAAa,CAAb;AACA,SAAKC,KAAL,GAAW,EAAX;AACAd,IAAAA,kBAAkB,CAAC,IAAD,CAAlB,CAVS,CAUe;AAE3B,GAd2B,CAe5B;;;AAEAe,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,SAAKT,MAAL,GAAcS,KAAd;AACH;;AAEDC,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,SAAKV,MAAL,GAAcU,KAAd;AACH;;AAEDC,EAAAA,eAAe,CAACC,IAAD,EAAO;AAElB,SAAKC,OAAL,CAAa,CAAb;AACA,SAAKZ,aAAL,GAAqBW,IAArB,CAHkB,CAIlB;;AACA,QAAI,KAAKX,aAAL,IAAsB,KAAKK,KAA/B,EAAqC;AACjC,WAAKA,KAAL,GAAa,KAAKL,aAAlB;AACAR,MAAAA,WAAW,CAAC,KAAKQ,aAAL,CAAmBa,EAApB,EAAwB,KAAKZ,KAA7B,EAAoC,CAApC,CAAX,CAAkDa,IAAlD,CAAuDC,IAAI,IAAI;AAC3D;AACA,aAAKP,SAAL,CAAeO,IAAI,CAACC,IAApB;AACA,aAAKC,aAAL,CAAmBF,IAAI,CAACG,KAAxB;AACH,OAJD,EAFiC,CAOjC;AACC,KARL,MASK,IAAI,KAAKd,MAAL,GAAY,CAAZ,IAAe,CAAf,IAAoB,KAAKJ,aAAL,IAAsB,KAAKK,KAAnD,EAAyD;AAC1D;AACA,WAAKL,aAAL,GAAoB,CAApB;AACH;;AACD,SAAKI,MAAL,GAAc,KAAKA,MAAL,GAAc,CAA5B;AACH;;AAEDQ,EAAAA,OAAO,CAACO,IAAD,EAAO;AACV,SAAKlB,KAAL,GAAakB,IAAb;AACH;;AAEDF,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACjB,SAAKhB,WAAL,GAAmBgB,KAAnB;AACH,GApD2B,CAsD5B;;;AACS,MAALX,KAAK,GAAG;AACR,WAAO,KAAKT,MAAZ;AACH;;AAES,MAANsB,MAAM,GAAG;AACT,WAAO,KAAKrB,MAAZ;AACH;;AACe,MAAZsB,YAAY,GAAG;AACf,WAAO,KAAKrB,aAAZ;AACH;;AACa,MAAVsB,UAAU,GAAG;AACb,WAAO,KAAKpB,WAAZ;AACH;;AACO,MAAJiB,IAAI,GAAG;AACP,WAAO,KAAKlB,KAAZ;AACH;;AACQ,MAALsB,KAAK,GAAG;AACR,WAAO,KAAKpB,MAAZ;AACH;;AAzE2B","sourcesContent":["import {makeAutoObservable} from 'mobx' //изменения \r\nimport { fetchPhotos } from \"../http/photoAPI\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { Context } from \"../index\";\r\n\r\n\r\n\r\nexport default class PhotoStore {\r\n    \r\n    constructor(){\r\n        \r\n        this._types = []\r\n        this._photo = []\r\n        this._selectedType = {}\r\n        this._page = 1\r\n        this._totalCount = 0\r\n        this._limit = 8\r\n        this._count =0\r\n        this._last={}\r\n        makeAutoObservable(this)//слежка за изменениями\r\n        \r\n    }\r\n    //при изменении перерендеринг\r\n\r\n    setTypes(types) {\r\n        this._types = types\r\n    }\r\n\r\n    setPhotos(photo) {\r\n        this._photo = photo\r\n    }\r\n\r\n    setSelectedType(type) {\r\n\r\n        this.setPage(1)\r\n        this._selectedType = type\r\n        //console.log(this._count)\r\n        if (this._selectedType != this._last){\r\n            this._last = this._selectedType\r\n            fetchPhotos(this._selectedType.id, this._page, 8).then(data => {\r\n                //console.log(data.count)\r\n                this.setPhotos(data.rows)\r\n                this.setTotalCount(data.count)\r\n            })\r\n            //console.log('Ок')\r\n            }\r\n        else if (this._count%2==0 && this._selectedType == this._last){\r\n            //console.log('Брух')\r\n            this._selectedType =0\r\n        }\r\n        this._count = this._count + 1\r\n    }\r\n\r\n    setPage(page) {\r\n        this._page = page\r\n    }\r\n    \r\n    setTotalCount(count) {\r\n        this._totalCount = count\r\n    }\r\n\r\n    //компьютед функции, вызываются только при изменении\r\n    get types() {\r\n        return this._types\r\n    }\r\n\r\n    get photos() {\r\n        return this._photo\r\n    }\r\n    get selectedType() {\r\n        return this._selectedType\r\n    }\r\n    get totalCount() {\r\n        return this._totalCount\r\n    }\r\n    get page() {\r\n        return this._page\r\n    }\r\n    get limit() {\r\n        return this._limit\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}